// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/wake-word.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WakeWordServiceClient is the client API for WakeWordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WakeWordServiceClient interface {
	// WakeWord listens for the wake word
	//
	// This is a streaming RPC that streams from the client waiting for the wake word to be detected.
	DetectWakeWord(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (WakeWordService_DetectWakeWordClient, error)
}

type wakeWordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWakeWordServiceClient(cc grpc.ClientConnInterface) WakeWordServiceClient {
	return &wakeWordServiceClient{cc}
}

func (c *wakeWordServiceClient) DetectWakeWord(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (WakeWordService_DetectWakeWordClient, error) {
	stream, err := c.cc.NewStream(ctx, &WakeWordService_ServiceDesc.Streams[0], "/api.v1.gpio_motor.WakeWordService/DetectWakeWord", opts...)
	if err != nil {
		return nil, err
	}
	x := &wakeWordServiceDetectWakeWordClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WakeWordService_DetectWakeWordClient interface {
	Recv() (*WakeWordResponse, error)
	grpc.ClientStream
}

type wakeWordServiceDetectWakeWordClient struct {
	grpc.ClientStream
}

func (x *wakeWordServiceDetectWakeWordClient) Recv() (*WakeWordResponse, error) {
	m := new(WakeWordResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WakeWordServiceServer is the server API for WakeWordService service.
// All implementations must embed UnimplementedWakeWordServiceServer
// for forward compatibility
type WakeWordServiceServer interface {
	// WakeWord listens for the wake word
	//
	// This is a streaming RPC that streams from the client waiting for the wake word to be detected.
	DetectWakeWord(*emptypb.Empty, WakeWordService_DetectWakeWordServer) error
	mustEmbedUnimplementedWakeWordServiceServer()
}

// UnimplementedWakeWordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWakeWordServiceServer struct {
}

func (UnimplementedWakeWordServiceServer) DetectWakeWord(*emptypb.Empty, WakeWordService_DetectWakeWordServer) error {
	return status.Errorf(codes.Unimplemented, "method DetectWakeWord not implemented")
}
func (UnimplementedWakeWordServiceServer) mustEmbedUnimplementedWakeWordServiceServer() {}

// UnsafeWakeWordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WakeWordServiceServer will
// result in compilation errors.
type UnsafeWakeWordServiceServer interface {
	mustEmbedUnimplementedWakeWordServiceServer()
}

func RegisterWakeWordServiceServer(s grpc.ServiceRegistrar, srv WakeWordServiceServer) {
	s.RegisterService(&WakeWordService_ServiceDesc, srv)
}

func _WakeWordService_DetectWakeWord_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WakeWordServiceServer).DetectWakeWord(m, &wakeWordServiceDetectWakeWordServer{stream})
}

type WakeWordService_DetectWakeWordServer interface {
	Send(*WakeWordResponse) error
	grpc.ServerStream
}

type wakeWordServiceDetectWakeWordServer struct {
	grpc.ServerStream
}

func (x *wakeWordServiceDetectWakeWordServer) Send(m *WakeWordResponse) error {
	return x.ServerStream.SendMsg(m)
}

// WakeWordService_ServiceDesc is the grpc.ServiceDesc for WakeWordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WakeWordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.gpio_motor.WakeWordService",
	HandlerType: (*WakeWordServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DetectWakeWord",
			Handler:       _WakeWordService_DetectWakeWord_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/wake-word.proto",
}
