// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/gpio-motor.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GpioMotorServiceClient is the client API for GpioMotorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GpioMotorServiceClient interface {
	// CloseMouth closes the mouth.
	CloseMouth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// LowerHead lowers the head.
	LowerHead(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// LowerTail lowers the tail.
	LowerTail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// OpenMouth opens the mouth.
	OpenMouth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// MoveMouthToSpeed moves the mouth to detected speech.
	//
	// This is a streaming RPC that streams from the client on how long to detect speech.
	MoveMouthToSpeech(ctx context.Context, opts ...grpc.CallOption) (GpioMotorService_MoveMouthToSpeechClient, error)
	// RaiseHead raises the head.
	RaiseHead(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// RaiseTail raises the tail.
	RaiseTail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ResetAll resets all motor positions.
	ResetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gpioMotorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGpioMotorServiceClient(cc grpc.ClientConnInterface) GpioMotorServiceClient {
	return &gpioMotorServiceClient{cc}
}

func (c *gpioMotorServiceClient) CloseMouth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.gpio_motor.GpioMotorService/CloseMouth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioMotorServiceClient) LowerHead(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.gpio_motor.GpioMotorService/LowerHead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioMotorServiceClient) LowerTail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.gpio_motor.GpioMotorService/LowerTail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioMotorServiceClient) OpenMouth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.gpio_motor.GpioMotorService/OpenMouth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioMotorServiceClient) MoveMouthToSpeech(ctx context.Context, opts ...grpc.CallOption) (GpioMotorService_MoveMouthToSpeechClient, error) {
	stream, err := c.cc.NewStream(ctx, &GpioMotorService_ServiceDesc.Streams[0], "/api.v1.gpio_motor.GpioMotorService/MoveMouthToSpeech", opts...)
	if err != nil {
		return nil, err
	}
	x := &gpioMotorServiceMoveMouthToSpeechClient{stream}
	return x, nil
}

type GpioMotorService_MoveMouthToSpeechClient interface {
	Send(*MoveMouthToSpeechRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type gpioMotorServiceMoveMouthToSpeechClient struct {
	grpc.ClientStream
}

func (x *gpioMotorServiceMoveMouthToSpeechClient) Send(m *MoveMouthToSpeechRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gpioMotorServiceMoveMouthToSpeechClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpioMotorServiceClient) RaiseHead(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.gpio_motor.GpioMotorService/RaiseHead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioMotorServiceClient) RaiseTail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.gpio_motor.GpioMotorService/RaiseTail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioMotorServiceClient) ResetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.gpio_motor.GpioMotorService/ResetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GpioMotorServiceServer is the server API for GpioMotorService service.
// All implementations must embed UnimplementedGpioMotorServiceServer
// for forward compatibility
type GpioMotorServiceServer interface {
	// CloseMouth closes the mouth.
	CloseMouth(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// LowerHead lowers the head.
	LowerHead(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// LowerTail lowers the tail.
	LowerTail(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// OpenMouth opens the mouth.
	OpenMouth(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// MoveMouthToSpeed moves the mouth to detected speech.
	//
	// This is a streaming RPC that streams from the client on how long to detect speech.
	MoveMouthToSpeech(GpioMotorService_MoveMouthToSpeechServer) error
	// RaiseHead raises the head.
	RaiseHead(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// RaiseTail raises the tail.
	RaiseTail(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// ResetAll resets all motor positions.
	ResetAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedGpioMotorServiceServer()
}

// UnimplementedGpioMotorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGpioMotorServiceServer struct {
}

func (UnimplementedGpioMotorServiceServer) CloseMouth(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseMouth not implemented")
}
func (UnimplementedGpioMotorServiceServer) LowerHead(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LowerHead not implemented")
}
func (UnimplementedGpioMotorServiceServer) LowerTail(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LowerTail not implemented")
}
func (UnimplementedGpioMotorServiceServer) OpenMouth(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenMouth not implemented")
}
func (UnimplementedGpioMotorServiceServer) MoveMouthToSpeech(GpioMotorService_MoveMouthToSpeechServer) error {
	return status.Errorf(codes.Unimplemented, "method MoveMouthToSpeech not implemented")
}
func (UnimplementedGpioMotorServiceServer) RaiseHead(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaiseHead not implemented")
}
func (UnimplementedGpioMotorServiceServer) RaiseTail(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaiseTail not implemented")
}
func (UnimplementedGpioMotorServiceServer) ResetAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAll not implemented")
}
func (UnimplementedGpioMotorServiceServer) mustEmbedUnimplementedGpioMotorServiceServer() {}

// UnsafeGpioMotorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GpioMotorServiceServer will
// result in compilation errors.
type UnsafeGpioMotorServiceServer interface {
	mustEmbedUnimplementedGpioMotorServiceServer()
}

func RegisterGpioMotorServiceServer(s grpc.ServiceRegistrar, srv GpioMotorServiceServer) {
	s.RegisterService(&GpioMotorService_ServiceDesc, srv)
}

func _GpioMotorService_CloseMouth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioMotorServiceServer).CloseMouth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.gpio_motor.GpioMotorService/CloseMouth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioMotorServiceServer).CloseMouth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioMotorService_LowerHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioMotorServiceServer).LowerHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.gpio_motor.GpioMotorService/LowerHead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioMotorServiceServer).LowerHead(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioMotorService_LowerTail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioMotorServiceServer).LowerTail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.gpio_motor.GpioMotorService/LowerTail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioMotorServiceServer).LowerTail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioMotorService_OpenMouth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioMotorServiceServer).OpenMouth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.gpio_motor.GpioMotorService/OpenMouth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioMotorServiceServer).OpenMouth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioMotorService_MoveMouthToSpeech_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GpioMotorServiceServer).MoveMouthToSpeech(&gpioMotorServiceMoveMouthToSpeechServer{stream})
}

type GpioMotorService_MoveMouthToSpeechServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*MoveMouthToSpeechRequest, error)
	grpc.ServerStream
}

type gpioMotorServiceMoveMouthToSpeechServer struct {
	grpc.ServerStream
}

func (x *gpioMotorServiceMoveMouthToSpeechServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gpioMotorServiceMoveMouthToSpeechServer) Recv() (*MoveMouthToSpeechRequest, error) {
	m := new(MoveMouthToSpeechRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GpioMotorService_RaiseHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioMotorServiceServer).RaiseHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.gpio_motor.GpioMotorService/RaiseHead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioMotorServiceServer).RaiseHead(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioMotorService_RaiseTail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioMotorServiceServer).RaiseTail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.gpio_motor.GpioMotorService/RaiseTail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioMotorServiceServer).RaiseTail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioMotorService_ResetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioMotorServiceServer).ResetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.gpio_motor.GpioMotorService/ResetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioMotorServiceServer).ResetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GpioMotorService_ServiceDesc is the grpc.ServiceDesc for GpioMotorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GpioMotorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.gpio_motor.GpioMotorService",
	HandlerType: (*GpioMotorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloseMouth",
			Handler:    _GpioMotorService_CloseMouth_Handler,
		},
		{
			MethodName: "LowerHead",
			Handler:    _GpioMotorService_LowerHead_Handler,
		},
		{
			MethodName: "LowerTail",
			Handler:    _GpioMotorService_LowerTail_Handler,
		},
		{
			MethodName: "OpenMouth",
			Handler:    _GpioMotorService_OpenMouth_Handler,
		},
		{
			MethodName: "RaiseHead",
			Handler:    _GpioMotorService_RaiseHead_Handler,
		},
		{
			MethodName: "RaiseTail",
			Handler:    _GpioMotorService_RaiseTail_Handler,
		},
		{
			MethodName: "ResetAll",
			Handler:    _GpioMotorService_ResetAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MoveMouthToSpeech",
			Handler:       _GpioMotorService_MoveMouthToSpeech_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/gpio-motor.proto",
}
